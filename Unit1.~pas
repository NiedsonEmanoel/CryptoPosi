unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, sMemo, Buttons, sBitBtn, sRadioButton, sLabel, sEdit;

type
  TForm1 = class(TForm)
    sEdit1: TsEdit;
    sLabel1: TsLabel;
    sLabel2: TsLabel;
    sEdit2: TsEdit;
    sRadioButton1: TsRadioButton;
    sRadioButton2: TsRadioButton;
    sBitBtn1: TsBitBtn;
    sBitBtn2: TsBitBtn;
    sMemo1: TsMemo;
    GroupBox1: TGroupBox;
    M1: TRadioButton;
    M2: TRadioButton;
    M3: TRadioButton;
    procedure FormCreate(Sender: TObject);
    procedure sEdit1Change(Sender: TObject);
    procedure sBitBtn2Click(Sender: TObject);
    procedure sRadioButton1Click(Sender: TObject);
    procedure sRadioButton2Click(Sender: TObject);
    procedure sBitBtn1Click(Sender: TObject);
    procedure sBitBtn4Click(Sender: TObject);
    procedure sBitBtn3Click(Sender: TObject);
    procedure M1Click(Sender: TObject);
    procedure M2Click(Sender: TObject);
    procedure M3Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  Chave: String;
  L: Integer  ;
  KO: Integer;

implementation

{$R *.dfm}

function Criptografar(wStri: String): String;
var Simbolos : array [0..4] of String;
x            : Integer;
begin
        Simbolos[1]:='ABCDEFGHIJLMNOPQRSTUVXZYWK ~!@#$%^&*()';
        Simbolos[2]:= 'ÂÀ©Øû×ƒçêùÿ5Üø£úñÑªº¿®¬¼ëèïÙýÄÅÉæÆôöò»Á';
        Simbolos[3]:= 'abcdefghijlmnopqrstuvxzywk1234567890';
        Simbolos[4]:= 'áâäàåíóÇüé¾¶§÷ÎÏ-+ÌÓß¸°¨·¹³²Õµþîì¡«½';

        for x := 1 to Length(Trim(wStri)) do
		begin
                if pos(copy(wStri,x,1),Simbolos[1])>0 then
                Result := Result+copy(Simbolos[2],
                          pos(copy(wStri,x,1),Simbolos[1]),1)

                else
				if pos(copy(wStri,x,1),Simbolos[2])>0 then
                   Result := Result+copy(Simbolos[1],
                             pos(copy(wStri,x,1),Simbolos[2]),1)

                else
				if pos(copy(wStri,x,1),Simbolos[3])>0 then
                   Result := Result+copy(Simbolos[4],
                             pos(copy(wStri,x,1),Simbolos[3]),1)

                else
				if pos(copy(wStri,x,1),Simbolos[4])>0 then
                   Result := Result+copy(Simbolos[3],
                          pos(copy(wStri,x,1),Simbolos[4]),1);
        end;
end;

function Crypt(Action, Src: String): String;
Label Fim;
var KeyLen : Integer;
       KeyPos : Integer;
       OffSet : Integer;
       Dest, Key : String;
       SrcPos : Integer;
       SrcAsc : Integer;
       TmpSrcAsc : Integer;
       Range : Integer;
begin
       if (Src = '') Then
       begin
               Result:= '';
               Goto Fim;
       end;
       Key := Chave;
       Dest := '';
       KeyLen := Length(Key);
       KeyPos := 0;
       SrcPos := 0;
       SrcAsc := 0;
       Range := 256;
       if (Action = UpperCase('C')) then
       begin
               Randomize;
               OffSet := Random(Range);
               Dest := Format('%1.2x',[OffSet]);
               for SrcPos := 1 to Length(Src) do
               begin
                       Application.ProcessMessages;
                       SrcAsc := (Ord(Src[srcPos]) + OffSet) Mod 255;
                       if KeyPos < KeyLen then KeyPos := KeyPos + 1 else KeyPos := 1;

                       SrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
                       Dest := Dest + Format('%1.2x',[srcAsc]);
                       OffSet := SrcAsc;
               end;
       end
       Else if (Action = UpperCase('D')) then
       begin
               OffSet := StrToInt('$' + copy(Src,1,2));//<--------------- adiciona o $ entra as aspas simples
               SrcPos := 3;
               repeat
                       SrcAsc := StrToInt('$' + copy(Src,SrcPos,2));//<--------------- adiciona o $ entra as aspas simples
                       if (KeyPos < KeyLen) Then KeyPos := KeyPos + 1 else KeyPos := 1;
                       TmpSrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
                       if TmpSrcAsc <= OffSet then TmpSrcAsc := 255 + TmpSrcAsc - OffSet
                       else TmpSrcAsc := TmpSrcAsc - OffSet;
                       Dest := Dest + Chr(TmpSrcAsc);
                       OffSet := SrcAsc;
                       SrcPos := SrcPos + 2;
               until (SrcPos >= Length(Src));
       end;
       Result:= Dest;
Fim:
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
Chave := 'Chave'   ;
L := 0;
ko:=0;
end;

procedure TForm1.sEdit1Change(Sender: TObject);
begin
Chave := sEdit1.Text;
end;

procedure TForm1.sBitBtn2Click(Sender: TObject);
begin
sEdit2.Text := '';
sRadioButton1.Checked := False;
sRadioButton2.Checked := False;
sMemo1.Lines.Clear;
L := 0;
end;

procedure TForm1.sRadioButton1Click(Sender: TObject);
begin
    L:= 1;
end;

procedure TForm1.sRadioButton2Click(Sender: TObject);
begin
 L:= 2;
end;

procedure TForm1.sBitBtn1Click(Sender: TObject);
var s:string; d:string; b: string; kk: String;
begin
sMemo1.Lines.Clear;

if Ko = 0 Then
Begin
  if (L = 0) then
    Begin
      ShowMessage('Escolha entre criptografar e descriptografar!!');
    end;

  if (L = 1) then
    Begin
      s:= Crypt('C', sEdit2.Text);
      sMemo1.Lines.Add(s);
       sMemo1.Lines.Add('');
    End;

  if (L = 2) then
    Begin
      d:= Crypt('D', sEdit2.Text);
      sMemo1.Lines.Add(d);
       sMemo1.Lines.Add('');
    End;
End;

if Ko = 1 then
  Begin
    if sEdit2.Text = '' then
      Begin
        ShowMessage('Digite a Mensagem');
      End
    Else
     Begin
        b:= Criptografar(sEdit2.Text);
        sMemo1.Lines.Add(b);
         sMemo1.Lines.Add('');
     End;
  End;

if Ko =2 then
  Begin
    b:= Criptografar(sEdit2.Text);
    sMemo1.Lines.Add(b+' - Inverter Mode');
    s:= Crypt('C', sEdit2.Text);
    sMemo1.Lines.Add(s+' - Master Mode')   ;
    sMemo1.Lines.Add('');
    d:= Criptografar(s);
    kk:= Crypt('C', d);
    sMemo1.Lines.Add(d+' - Combo Mode');
    sMemo1.Lines.Add('');
    sMemo1.Lines.Add('Master Mod + Inverter Mod + Master Mod');
    sMemo1.Lines.Add('');
  End;

end;
procedure TForm1.sBitBtn4Click(Sender: TObject);
 var b: String;
begin

end;

procedure TForm1.sBitBtn3Click(Sender: TObject);
begin
sEdit2.Text := '';
sMemo1.Lines.Clear;
end;

procedure TForm1.M1Click(Sender: TObject);
begin
KO:= 0;
sRadioButton1.Enabled := true;
sRadioButton2.Enabled := true ;
sEdit1.Enabled := true;
end;

procedure TForm1.M2Click(Sender: TObject);
begin
KO:= 1;
sRadioButton1.Enabled := false ;
sRadioButton2.Enabled := false  ;
sEdit1.Enabled := False;
end;

procedure TForm1.M3Click(Sender: TObject);
begin
KO:= 2;
sEdit1.Enabled := true;
   sRadioButton2.Enabled := False;
   sRadioButton1.Checked := True;
end;

end.
